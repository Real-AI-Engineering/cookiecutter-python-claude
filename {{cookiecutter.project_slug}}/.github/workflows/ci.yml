{% if cookiecutter.use_github_actions == "y" -%}
name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

concurrency:
  group: {% raw %}${{ github.workflow }}-${{ github.ref }}{% endraw %}
  cancel-in-progress: true

jobs:
  test:
    runs-on: {% raw %}${{ matrix.os }}{% endraw %}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: 
          {% if cookiecutter.python_version == "3.10" -%}
          - "3.10"
          - "3.11"
          - "3.12"
          - "3.13"
          {% elif cookiecutter.python_version == "3.11" -%}
          - "3.11"
          - "3.12" 
          - "3.13"
          {% elif cookiecutter.python_version == "3.12" -%}
          - "3.12"
          - "3.13"
          {% else -%}
          - "{{cookiecutter.python_version}}"
          {% endif %}
        exclude:
          # Exclude some combinations to reduce CI time
          - os: windows-latest
            python-version: "3.11"
          - os: macos-latest
            python-version: "3.11"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python {% raw %}${{ matrix.python-version }}{% endraw %}
      uses: actions/setup-python@v5
      with:
        python-version: {% raw %}${{ matrix.python-version }}{% endraw %}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,test]"

    - name: Lint with ruff
      run: |
        # Check for linting errors
        ruff check .
        # Check formatting
        ruff format --check .

    - name: Type check with mypy
      run: |
        mypy src/

    {% if cookiecutter.project_type != "cli" -%}
    - name: Type check with pyright
      run: |
        pyright src/

    {% endif -%}
    - name: Test with pytest
      run: |
        pytest --cov={{cookiecutter.project_slug}} --cov-report=xml --cov-report=term-missing

    - name: Upload coverage reports to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '{{cookiecutter.python_version}}'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
        verbose: true

  security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "{{cookiecutter.python_version}}"
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml] safety

    - name: Security check with bandit
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/

    - name: Check for known security vulnerabilities
      run: |
        safety check --json --output safety-report.json || true
        safety check

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  {% if cookiecutter.use_docker == "y" -%}
  docker:
    runs-on: ubuntu-latest
    needs: [test]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: docker/Dockerfile
        push: false
        tags: {{cookiecutter.project_slug}}:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    {% if cookiecutter.project_type != "cli" -%}
    - name: Test Docker image
      run: |
        # Start the container in background
        docker run -d --name test-container -p 8000:8000 {{cookiecutter.project_slug}}:test
        
        # Wait for the application to start
        sleep 10
        
        # Test health endpoints
        curl -f http://localhost:8000/healthz || exit 1
        curl -f http://localhost:8000/livez || exit 1
        curl -f http://localhost:8000/readyz || exit 1
        
        # Stop the container
        docker stop test-container
        docker rm test-container

    {% endif -%}
  {% endif -%}
  
  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "{{cookiecutter.python_version}}"
        cache: 'pip'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  {% if cookiecutter.project_type != "web" -%}
  integration:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "{{cookiecutter.python_version}}"

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Install package from wheel
      run: |
        pip install dist/*.whl

    {% if cookiecutter.command_line_interface != "None" -%}
    - name: Test CLI installation
      run: |
        {{cookiecutter.project_slug}} --help
        {{cookiecutter.project_slug}} --version
    {% endif %}

    - name: Run integration tests
      run: |
        # Add integration test commands here
        echo "Integration tests would run here"
  {% endif %}
  
  {% if cookiecutter.project_type != "cli" -%}
  fastapi-integration:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "{{cookiecutter.python_version}}"

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Install package from wheel
      run: |
        pip install dist/*.whl

    - name: Test FastAPI application
      run: |
        # Start the application in background
        python -m {{cookiecutter.project_slug}}.main &
        APP_PID=$!
        
        # Wait for the application to start
        sleep 5
        
        # Test health endpoints
        curl -f http://localhost:8000/healthz
        curl -f http://localhost:8000/livez  
        curl -f http://localhost:8000/readyz
        curl -f http://localhost:8000/
        
        # Test OpenAPI docs (if debug mode)
        curl -f http://localhost:8000/openapi.json || echo "OpenAPI not available (production mode)"
        
        # Stop the application
        kill $APP_PID
  {% endif %}
{% endif %}